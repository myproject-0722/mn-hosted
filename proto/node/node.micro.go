// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: node.proto

package go_mnhosted_srv_node

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Coin service

type CoinService interface {
	Get(ctx context.Context, in *CoinListRequest, opts ...client.CallOption) (*CoinListResponse, error)
	GetCoinItem(ctx context.Context, in *CoinItemRequest, opts ...client.CallOption) (*CoinItemResponse, error)
	GetCoinRewards(ctx context.Context, in *CoinRewardsRequest, opts ...client.CallOption) (*CoinRewardsResponse, error)
}

type coinService struct {
	c    client.Client
	name string
}

func NewCoinService(name string, c client.Client) CoinService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.mnhosted.srv.node"
	}
	return &coinService{
		c:    c,
		name: name,
	}
}

func (c *coinService) Get(ctx context.Context, in *CoinListRequest, opts ...client.CallOption) (*CoinListResponse, error) {
	req := c.c.NewRequest(c.name, "Coin.Get", in)
	out := new(CoinListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) GetCoinItem(ctx context.Context, in *CoinItemRequest, opts ...client.CallOption) (*CoinItemResponse, error) {
	req := c.c.NewRequest(c.name, "Coin.GetCoinItem", in)
	out := new(CoinItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinService) GetCoinRewards(ctx context.Context, in *CoinRewardsRequest, opts ...client.CallOption) (*CoinRewardsResponse, error) {
	req := c.c.NewRequest(c.name, "Coin.GetCoinRewards", in)
	out := new(CoinRewardsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coin service

type CoinHandler interface {
	Get(context.Context, *CoinListRequest, *CoinListResponse) error
	GetCoinItem(context.Context, *CoinItemRequest, *CoinItemResponse) error
	GetCoinRewards(context.Context, *CoinRewardsRequest, *CoinRewardsResponse) error
}

func RegisterCoinHandler(s server.Server, hdlr CoinHandler, opts ...server.HandlerOption) error {
	type coin interface {
		Get(ctx context.Context, in *CoinListRequest, out *CoinListResponse) error
		GetCoinItem(ctx context.Context, in *CoinItemRequest, out *CoinItemResponse) error
		GetCoinRewards(ctx context.Context, in *CoinRewardsRequest, out *CoinRewardsResponse) error
	}
	type Coin struct {
		coin
	}
	h := &coinHandler{hdlr}
	return s.Handle(s.NewHandler(&Coin{h}, opts...))
}

type coinHandler struct {
	CoinHandler
}

func (h *coinHandler) Get(ctx context.Context, in *CoinListRequest, out *CoinListResponse) error {
	return h.CoinHandler.Get(ctx, in, out)
}

func (h *coinHandler) GetCoinItem(ctx context.Context, in *CoinItemRequest, out *CoinItemResponse) error {
	return h.CoinHandler.GetCoinItem(ctx, in, out)
}

func (h *coinHandler) GetCoinRewards(ctx context.Context, in *CoinRewardsRequest, out *CoinRewardsResponse) error {
	return h.CoinHandler.GetCoinRewards(ctx, in, out)
}

// Client API for Masternode service

type MasternodeService interface {
	New(ctx context.Context, in *MasterNodeNewRequest, opts ...client.CallOption) (*MasterNodeNewResponse, error)
	Renew(ctx context.Context, in *MasterNodeRenewRequest, opts ...client.CallOption) (*MasterNodeRenewResponse, error)
	IsExsit(ctx context.Context, in *MasterNodeCheckRequest, opts ...client.CallOption) (*MasterNodeCheckResponse, error)
	Get(ctx context.Context, in *MasterNodeListRequest, opts ...client.CallOption) (*MasterNodeListResponse, error)
	GetCount(ctx context.Context, in *GetCountRequest, opts ...client.CallOption) (*GetCountResponse, error)
}

type masternodeService struct {
	c    client.Client
	name string
}

func NewMasternodeService(name string, c client.Client) MasternodeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.mnhosted.srv.node"
	}
	return &masternodeService{
		c:    c,
		name: name,
	}
}

func (c *masternodeService) New(ctx context.Context, in *MasterNodeNewRequest, opts ...client.CallOption) (*MasterNodeNewResponse, error) {
	req := c.c.NewRequest(c.name, "Masternode.New", in)
	out := new(MasterNodeNewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masternodeService) Renew(ctx context.Context, in *MasterNodeRenewRequest, opts ...client.CallOption) (*MasterNodeRenewResponse, error) {
	req := c.c.NewRequest(c.name, "Masternode.Renew", in)
	out := new(MasterNodeRenewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masternodeService) IsExsit(ctx context.Context, in *MasterNodeCheckRequest, opts ...client.CallOption) (*MasterNodeCheckResponse, error) {
	req := c.c.NewRequest(c.name, "Masternode.IsExsit", in)
	out := new(MasterNodeCheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masternodeService) Get(ctx context.Context, in *MasterNodeListRequest, opts ...client.CallOption) (*MasterNodeListResponse, error) {
	req := c.c.NewRequest(c.name, "Masternode.Get", in)
	out := new(MasterNodeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masternodeService) GetCount(ctx context.Context, in *GetCountRequest, opts ...client.CallOption) (*GetCountResponse, error) {
	req := c.c.NewRequest(c.name, "Masternode.GetCount", in)
	out := new(GetCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Masternode service

type MasternodeHandler interface {
	New(context.Context, *MasterNodeNewRequest, *MasterNodeNewResponse) error
	Renew(context.Context, *MasterNodeRenewRequest, *MasterNodeRenewResponse) error
	IsExsit(context.Context, *MasterNodeCheckRequest, *MasterNodeCheckResponse) error
	Get(context.Context, *MasterNodeListRequest, *MasterNodeListResponse) error
	GetCount(context.Context, *GetCountRequest, *GetCountResponse) error
}

func RegisterMasternodeHandler(s server.Server, hdlr MasternodeHandler, opts ...server.HandlerOption) error {
	type masternode interface {
		New(ctx context.Context, in *MasterNodeNewRequest, out *MasterNodeNewResponse) error
		Renew(ctx context.Context, in *MasterNodeRenewRequest, out *MasterNodeRenewResponse) error
		IsExsit(ctx context.Context, in *MasterNodeCheckRequest, out *MasterNodeCheckResponse) error
		Get(ctx context.Context, in *MasterNodeListRequest, out *MasterNodeListResponse) error
		GetCount(ctx context.Context, in *GetCountRequest, out *GetCountResponse) error
	}
	type Masternode struct {
		masternode
	}
	h := &masternodeHandler{hdlr}
	return s.Handle(s.NewHandler(&Masternode{h}, opts...))
}

type masternodeHandler struct {
	MasternodeHandler
}

func (h *masternodeHandler) New(ctx context.Context, in *MasterNodeNewRequest, out *MasterNodeNewResponse) error {
	return h.MasternodeHandler.New(ctx, in, out)
}

func (h *masternodeHandler) Renew(ctx context.Context, in *MasterNodeRenewRequest, out *MasterNodeRenewResponse) error {
	return h.MasternodeHandler.Renew(ctx, in, out)
}

func (h *masternodeHandler) IsExsit(ctx context.Context, in *MasterNodeCheckRequest, out *MasterNodeCheckResponse) error {
	return h.MasternodeHandler.IsExsit(ctx, in, out)
}

func (h *masternodeHandler) Get(ctx context.Context, in *MasterNodeListRequest, out *MasterNodeListResponse) error {
	return h.MasternodeHandler.Get(ctx, in, out)
}

func (h *masternodeHandler) GetCount(ctx context.Context, in *GetCountRequest, out *GetCountResponse) error {
	return h.MasternodeHandler.GetCount(ctx, in, out)
}
