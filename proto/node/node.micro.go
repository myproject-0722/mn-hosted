// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: node.proto

package go_mnhosted_srv_node

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Coinlist service

type CoinlistService interface {
	Get(ctx context.Context, in *CoinListRequest, opts ...client.CallOption) (*CoinListResponse, error)
}

type coinlistService struct {
	c    client.Client
	name string
}

func NewCoinlistService(name string, c client.Client) CoinlistService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.mnhosted.srv.node"
	}
	return &coinlistService{
		c:    c,
		name: name,
	}
}

func (c *coinlistService) Get(ctx context.Context, in *CoinListRequest, opts ...client.CallOption) (*CoinListResponse, error) {
	req := c.c.NewRequest(c.name, "Coinlist.Get", in)
	out := new(CoinListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coinlist service

type CoinlistHandler interface {
	Get(context.Context, *CoinListRequest, *CoinListResponse) error
}

func RegisterCoinlistHandler(s server.Server, hdlr CoinlistHandler, opts ...server.HandlerOption) error {
	type coinlist interface {
		Get(ctx context.Context, in *CoinListRequest, out *CoinListResponse) error
	}
	type Coinlist struct {
		coinlist
	}
	h := &coinlistHandler{hdlr}
	return s.Handle(s.NewHandler(&Coinlist{h}, opts...))
}

type coinlistHandler struct {
	CoinlistHandler
}

func (h *coinlistHandler) Get(ctx context.Context, in *CoinListRequest, out *CoinListResponse) error {
	return h.CoinlistHandler.Get(ctx, in, out)
}

// Client API for Masternode service

type MasternodeService interface {
	New(ctx context.Context, in *MasterNodeNewRequest, opts ...client.CallOption) (*MasterNodeNewResponse, error)
}

type masternodeService struct {
	c    client.Client
	name string
}

func NewMasternodeService(name string, c client.Client) MasternodeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.mnhosted.srv.node"
	}
	return &masternodeService{
		c:    c,
		name: name,
	}
}

func (c *masternodeService) New(ctx context.Context, in *MasterNodeNewRequest, opts ...client.CallOption) (*MasterNodeNewResponse, error) {
	req := c.c.NewRequest(c.name, "Masternode.New", in)
	out := new(MasterNodeNewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Masternode service

type MasternodeHandler interface {
	New(context.Context, *MasterNodeNewRequest, *MasterNodeNewResponse) error
}

func RegisterMasternodeHandler(s server.Server, hdlr MasternodeHandler, opts ...server.HandlerOption) error {
	type masternode interface {
		New(ctx context.Context, in *MasterNodeNewRequest, out *MasterNodeNewResponse) error
	}
	type Masternode struct {
		masternode
	}
	h := &masternodeHandler{hdlr}
	return s.Handle(s.NewHandler(&Masternode{h}, opts...))
}

type masternodeHandler struct {
	MasternodeHandler
}

func (h *masternodeHandler) New(ctx context.Context, in *MasterNodeNewRequest, out *MasterNodeNewResponse) error {
	return h.MasternodeHandler.New(ctx, in, out)
}
