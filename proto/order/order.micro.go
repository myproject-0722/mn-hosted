// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order.proto

package go_mnhosted_srv_order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Order service

type OrderService interface {
	New(ctx context.Context, in *NewRequest, opts ...client.CallOption) (*NewResponse, error)
	Alipay(ctx context.Context, in *AlipayRequest, opts ...client.CallOption) (*AlipayResponse, error)
	ConfirmAlipay(ctx context.Context, in *ConfirmAlipayRequest, opts ...client.CallOption) (*ConfirmAlipayResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error)
	GetList(ctx context.Context, in *OrderListRequest, opts ...client.CallOption) (*OrderListResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.mnhosted.srv.order"
	}
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) New(ctx context.Context, in *NewRequest, opts ...client.CallOption) (*NewResponse, error) {
	req := c.c.NewRequest(c.name, "Order.New", in)
	out := new(NewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Alipay(ctx context.Context, in *AlipayRequest, opts ...client.CallOption) (*AlipayResponse, error) {
	req := c.c.NewRequest(c.name, "Order.Alipay", in)
	out := new(AlipayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmAlipay(ctx context.Context, in *ConfirmAlipayRequest, opts ...client.CallOption) (*ConfirmAlipayResponse, error) {
	req := c.c.NewRequest(c.name, "Order.ConfirmAlipay", in)
	out := new(ConfirmAlipayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Order.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*GetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Order.GetInfo", in)
	out := new(GetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetList(ctx context.Context, in *OrderListRequest, opts ...client.CallOption) (*OrderListResponse, error) {
	req := c.c.NewRequest(c.name, "Order.GetList", in)
	out := new(OrderListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderHandler interface {
	New(context.Context, *NewRequest, *NewResponse) error
	Alipay(context.Context, *AlipayRequest, *AlipayResponse) error
	ConfirmAlipay(context.Context, *ConfirmAlipayRequest, *ConfirmAlipayResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	GetInfo(context.Context, *GetInfoRequest, *GetInfoResponse) error
	GetList(context.Context, *OrderListRequest, *OrderListResponse) error
}

func RegisterOrderHandler(s server.Server, hdlr OrderHandler, opts ...server.HandlerOption) error {
	type order interface {
		New(ctx context.Context, in *NewRequest, out *NewResponse) error
		Alipay(ctx context.Context, in *AlipayRequest, out *AlipayResponse) error
		ConfirmAlipay(ctx context.Context, in *ConfirmAlipayRequest, out *ConfirmAlipayResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error
		GetList(ctx context.Context, in *OrderListRequest, out *OrderListResponse) error
	}
	type Order struct {
		order
	}
	h := &orderHandler{hdlr}
	return s.Handle(s.NewHandler(&Order{h}, opts...))
}

type orderHandler struct {
	OrderHandler
}

func (h *orderHandler) New(ctx context.Context, in *NewRequest, out *NewResponse) error {
	return h.OrderHandler.New(ctx, in, out)
}

func (h *orderHandler) Alipay(ctx context.Context, in *AlipayRequest, out *AlipayResponse) error {
	return h.OrderHandler.Alipay(ctx, in, out)
}

func (h *orderHandler) ConfirmAlipay(ctx context.Context, in *ConfirmAlipayRequest, out *ConfirmAlipayResponse) error {
	return h.OrderHandler.ConfirmAlipay(ctx, in, out)
}

func (h *orderHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.OrderHandler.Update(ctx, in, out)
}

func (h *orderHandler) GetInfo(ctx context.Context, in *GetInfoRequest, out *GetInfoResponse) error {
	return h.OrderHandler.GetInfo(ctx, in, out)
}

func (h *orderHandler) GetList(ctx context.Context, in *OrderListRequest, out *OrderListResponse) error {
	return h.OrderHandler.GetList(ctx, in, out)
}
